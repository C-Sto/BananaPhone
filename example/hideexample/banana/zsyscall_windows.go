// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"fmt"
	"unsafe"

	bananaphone "github.com/C-Sto/BananaPhone/pkg/BananaPhone"
)

var _ unsafe.Pointer

var (
	bpGlobal, bperr = bananaphone.NewBananaPhone(bananaphone.AutoBananaPhoneMode)
)

func NtWriteVirtualMemory(hProcess uintptr, lpBaseAddress uintptr, lpBuffer *byte, nSize uintptr, lpNumberOfBytesWritten *uintptr) (err error) {
	if bpGlobal == nil {
		err = fmt.Errorf("BananaPhone uninitialised: %s", bperr.Error())
		return
	}

	sysid, e := bpGlobal.GetSysID("NtWriteVirtualMemory")
	if e != nil {
		err = e
		return
	}
	r1, _ := bananaphone.Syscall(sysid, uintptr(hProcess), uintptr(lpBaseAddress), uintptr(unsafe.Pointer(lpBuffer)), uintptr(nSize), uintptr(unsafe.Pointer(lpNumberOfBytesWritten)))
	if r1 != 0 {
		err = fmt.Errorf("error code: %x", r1)
	}
	print("SYSCALL: NtWriteVirtualMemory(", "hProcess=", hProcess, ", ", "lpBaseAddress=", lpBaseAddress, ", ", "lpBuffer=", lpBuffer, ", ", "nSize=", nSize, ", ", "lpNumberOfBytesWritten=", lpNumberOfBytesWritten, ") (", "err=", err, ")\n")
	return
}

func NtAllocateVirtualMemory(hProcess uintptr, lpAddress *uintptr, zerobits uintptr, dwSize *uint32, flAllocationType uint32, flProtect uint32) (err error) {
	if bpGlobal == nil {
		err = fmt.Errorf("BananaPhone uninitialised: %s", bperr.Error())
		return
	}

	sysid, e := bpGlobal.GetSysID("NtAllocateVirtualMemory")
	if e != nil {
		err = e
		return
	}
	r1, _ := bananaphone.Syscall(sysid, uintptr(hProcess), uintptr(unsafe.Pointer(lpAddress)), uintptr(zerobits), uintptr(unsafe.Pointer(dwSize)), uintptr(flAllocationType), uintptr(flProtect))
	if r1 != 0 {
		err = fmt.Errorf("error code: %x", r1)
	}
	print("SYSCALL: NtAllocateVirtualMemory(", "hProcess=", hProcess, ", ", "lpAddress=", lpAddress, ", ", "zerobits=", zerobits, ", ", "dwSize=", dwSize, ", ", "flAllocationType=", flAllocationType, ", ", "flProtect=", flProtect, ") (", "err=", err, ")\n")
	return
}

func NtProtectVirtualMemory(hProcess uintptr, lpAddress *uintptr, dwSize *uintptr, flNewProtect uint32, lpflOldProtect *uint32) (err error) {
	if bpGlobal == nil {
		err = fmt.Errorf("BananaPhone uninitialised: %s", bperr.Error())
		return
	}

	sysid, e := bpGlobal.GetSysID("NtProtectVirtualMemory")
	if e != nil {
		err = e
		return
	}
	r1, _ := bananaphone.Syscall(sysid, uintptr(hProcess), uintptr(unsafe.Pointer(lpAddress)), uintptr(unsafe.Pointer(dwSize)), uintptr(flNewProtect), uintptr(unsafe.Pointer(lpflOldProtect)))
	if r1 != 0 {
		err = fmt.Errorf("error code: %x", r1)
	}
	print("SYSCALL: NtProtectVirtualMemory(", "hProcess=", hProcess, ", ", "lpAddress=", lpAddress, ", ", "dwSize=", dwSize, ", ", "flNewProtect=", flNewProtect, ", ", "lpflOldProtect=", lpflOldProtect, ") (", "err=", err, ")\n")
	return
}

func NtCreateThreadEx(hThread *uintptr, desiredaccess uintptr, objattrib uintptr, processhandle uintptr, lpstartaddr uintptr, lpparam uintptr, createsuspended uintptr, zerobits uintptr, sizeofstack uintptr, sizeofstackreserve uintptr, lpbytesbuffer uintptr) (err error) {
	if bpGlobal == nil {
		err = fmt.Errorf("BananaPhone uninitialised: %s", bperr.Error())
		return
	}

	sysid, e := bpGlobal.GetSysID("NtCreateThreadEx")
	if e != nil {
		err = e
		return
	}
	r1, _ := bananaphone.Syscall(sysid, uintptr(unsafe.Pointer(hThread)), uintptr(desiredaccess), uintptr(objattrib), uintptr(processhandle), uintptr(lpstartaddr), uintptr(lpparam), uintptr(createsuspended), uintptr(zerobits), uintptr(sizeofstack), uintptr(sizeofstackreserve), uintptr(lpbytesbuffer))
	if r1 != 0 {
		err = fmt.Errorf("error code: %x", r1)
	}
	print("SYSCALL: NtCreateThreadEx(", "hThread=", hThread, ", ", "desiredaccess=", desiredaccess, ", ", "objattrib=", objattrib, ", ", "processhandle=", processhandle, ", ", "lpstartaddr=", lpstartaddr, ", ", "lpparam=", lpparam, ", ", "createsuspended=", createsuspended, ", ", "zerobits=", zerobits, ", ", "sizeofstack=", sizeofstack, ", ", "sizeofstackreserve=", sizeofstackreserve, ", ", "lpbytesbuffer=", lpbytesbuffer, ") (", "err=", err, ")\n")
	return
}
