// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modntdll = windows.NewLazySystemDLL("ntdll.dll")

	procNtWriteVirtualMemory    = modntdll.NewProc("NtWriteVirtualMemory")
	procNtAllocateVirtualMemory = modntdll.NewProc("NtAllocateVirtualMemory")
	procNtCreateThreadEx        = modntdll.NewProc("NtCreateThreadEx")
)

func NtWriteVirtualMemory(hProcess uintptr, lpBaseAddress uintptr, lpBuffer *byte, nSize uintptr, lpNumberOfBytesWritten *uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procNtWriteVirtualMemory.Addr(), 5, uintptr(hProcess), uintptr(lpBaseAddress), uintptr(unsafe.Pointer(lpBuffer)), uintptr(nSize), uintptr(unsafe.Pointer(lpNumberOfBytesWritten)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	print("SYSCALL: NtWriteVirtualMemory(", "hProcess=", hProcess, ", ", "lpBaseAddress=", lpBaseAddress, ", ", "lpBuffer=", lpBuffer, ", ", "nSize=", nSize, ", ", "lpNumberOfBytesWritten=", lpNumberOfBytesWritten, ") (", "err=", err, ")\n")
	return
}

func NtAllocateVirtualMemory(hProcess uintptr, lpAddress *uintptr, zerobits uintptr, dwSize *uint32, flAllocationType uint32, flProtect uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procNtAllocateVirtualMemory.Addr(), 6, uintptr(hProcess), uintptr(unsafe.Pointer(lpAddress)), uintptr(zerobits), uintptr(unsafe.Pointer(dwSize)), uintptr(flAllocationType), uintptr(flProtect))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	print("SYSCALL: NtAllocateVirtualMemory(", "hProcess=", hProcess, ", ", "lpAddress=", lpAddress, ", ", "zerobits=", zerobits, ", ", "dwSize=", dwSize, ", ", "flAllocationType=", flAllocationType, ", ", "flProtect=", flProtect, ") (", "err=", err, ")\n")
	return
}

func NtCreateThreadEx(hThread *uintptr, desiredaccess uintptr, objattrib uintptr, processhandle uintptr, lpstartaddr uintptr, lpparam uintptr, createsuspended uintptr, zerobits uintptr, sizeofstack uintptr, sizeofstackreserve uintptr, lpbytesbuffer uintptr) (err error) {
	r1, _, e1 := syscall.Syscall12(procNtCreateThreadEx.Addr(), 11, uintptr(unsafe.Pointer(hThread)), uintptr(desiredaccess), uintptr(objattrib), uintptr(processhandle), uintptr(lpstartaddr), uintptr(lpparam), uintptr(createsuspended), uintptr(zerobits), uintptr(sizeofstack), uintptr(sizeofstackreserve), uintptr(lpbytesbuffer), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	print("SYSCALL: NtCreateThreadEx(", "hThread=", hThread, ", ", "desiredaccess=", desiredaccess, ", ", "objattrib=", objattrib, ", ", "processhandle=", processhandle, ", ", "lpstartaddr=", lpstartaddr, ", ", "lpparam=", lpparam, ", ", "createsuspended=", createsuspended, ", ", "zerobits=", zerobits, ", ", "sizeofstack=", sizeofstack, ", ", "sizeofstackreserve=", sizeofstackreserve, ", ", "lpbytesbuffer=", lpbytesbuffer, ") (", "err=", err, ")\n")
	return
}
